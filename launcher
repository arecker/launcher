#!/usr/bin/env python
import argparse
import collections
import configparser
import json
import logging
import os
import subprocess
import sys

logging.basicConfig(stream=sys.stderr,
                    level=logging.INFO,
                    format='launcher: %(message)s')
logger = logging.getLogger(__name__)

parser = argparse.ArgumentParser()

parser.add_argument('--verbose',
                    default=False,
                    action='store_true',
                    help='print debug logs')

parser.add_argument('--config', required=True, help='path to config file')

config = configparser.ConfigParser()

Job = collections.namedtuple('Job', 'key directory command env')


def configured_jobs():
    for section in config.sections():
        kwargs = {}
        info = config[section]
        kwargs['command'] = os.path.expandvars(info['command']).split(' ')
        kwargs['directory'] = os.path.expanduser(info['directory'])

        try:
            with open(os.path.expanduser(info['environment'])) as f:
                kwargs['env'] = json.load(f)
        except KeyError:
            kwargs['env'] = {}

        yield Job(key=section, **kwargs)


def main():
    args = parser.parse_args()

    if args.verbose:
        logger.setLevel(logging.DEBUG)

    logger.debug('called with args = %s', vars(args))

    config.read(args.config)
    logger.debug('loaded config from %s', args.config)

    children = []
    for job in configured_jobs():
        process = subprocess.Popen(job.command,
                                   cwd=job.directory,
                                   env=job.env,
                                   stderr=subprocess.DEVNULL,
                                   stdout=subprocess.DEVNULL,
                                   stdin=subprocess.DEVNULL)
        children.append(process)
        logger.info('launched child %d for job %s', process.pid, job)

    logger.info('waiting for jobs to be complete...')
    for child in children:
        child.wait()


if __name__ == '__main__':
    main()
