#!/usr/bin/env python
import argparse
import collections
import configparser
import functools
import logging
import pathlib
import re
import shlex
import shutil
import string
import subprocess
import sys

logging.basicConfig(stream=sys.stderr,
                    level=logging.INFO,
                    format='launcher: %(message)s')
logger = logging.getLogger(__name__)

parser = argparse.ArgumentParser()

parser.add_argument('--verbose',
                    default=False,
                    action='store_true',
                    help='print debug logs')

parser.add_argument('--silent',
                    default=False,
                    action='store_true',
                    help='hide all logs')

parser.add_argument('--config', required=True, help='path to config file')

config = configparser.ConfigParser()

Job = collections.namedtuple('Job', 'key directory command env')


class Task:
    def __init__(self, config=None, base_dir=pathlib.Path('.')):
        self.base_dir = base_dir.absolute()
        self.config = config
        self.process = None

    def __repr__(self):
        return '<Task {}>'.format(self.name)

    def _parse_path(self, value):
        if value.startswith('./') or value.startswith('../'):
            return (self.base_dir / value).absolute()
        elif value == '.':
            return self.base_dir
        elif value == '..':
            return self.base_dir.parent
        else:
            return pathlib.Path(value).absolute()

    @property
    def directory(self):
        return self._parse_path(self.config['directory'])

    @property
    def envfile(self):
        value = self.config.get('envfile', None)
        if value:
            return self._parse_path(value)

    @functools.cached_property
    def env(self):
        if not self.envfile:
            return {}

        pattern = re.compile(r'^(?P<key>.*?)=[\'\"]?(?P<value>.*?)[\'\"]?$')
        with open(self.envfile) as f:
            data = dict(pattern.findall(f.read()))
        logger.debug('loaded %d key(s) from %s for %s', len(data.keys()),
                     self.envfile, self)
        return data

    @property
    def started(self):
        return bool(self.process)

    @property
    def running(self):
        if not self.started:
            return False

        if self.process.poll() is None:
            return False

        return True

    @property
    def name(self):
        return self.config.name

    @property
    def command(self):
        value = self.config['command']
        value = string.Template(value).safe_substitute(**self.env)
        cmd, *rest = shlex.split(value)
        cmd = shutil.which(cmd) or cmd
        return [cmd, *rest]

    @property
    def pid(self):
        if self.process:
            return self.process.pid

    @property
    def returncode(self):
        if self.process:
            return self.process.returncode

    def start(self):
        self.process = subprocess.Popen(args=self.command,
                                        cwd=self.directory,
                                        env=self.env,
                                        encoding='UTF-8',
                                        text=True,
                                        stdout=subprocess.PIPE,
                                        stderr=subprocess.PIPE)
        logger.info('started %s (%d)', self, self.pid)
        return self

    def kill(self):
        if not self.started:
            logger.warning('cannot kill %s since it was never started!', self)
            return

        if self.running:
            self.process.kill()
            logger.info('killed %s (%d)', self, self.pid)
            logger.debug(self.report_output())
        else:
            logger.debug('skipping %s (%d) kill, since no longer running',
                         self, self.pid)

    def report_output(self):
        output = []

        stdout = self.process.stdout.read().strip()
        if stdout:
            output += ['\n--- stdout', '\n'.join(stdout.splitlines()[-10:])]

        stderr = self.process.stderr.read().strip()
        if stderr:
            output += ['\n--- stderr', '\n'.join(stderr.splitlines()[-10:])]

        output = '\n'.join(output).strip()
        return output or '(no output)'


def main():
    args = parser.parse_args()

    if args.verbose:
        logger.setLevel(logging.DEBUG)
    elif args.silent:
        logger.setLevel(logging.FATAL)

    logger.debug('called with args = %s', vars(args))

    config.read(args.config)
    logger.debug('loaded config from %s', args.config)

    base_dir = pathlib.Path(args.config).parent

    tasks = [
        Task(config=section, base_dir=base_dir) for section in config.values()
        if section.name != 'DEFAULT'
    ]

    running = [task.start() for task in tasks]

    try:
        while True:
            pass
    except (KeyboardInterrupt, InterruptedError):
        logger.info('parent process interrupted')
    finally:
        [task.kill() for task in running]


if __name__ == '__main__':
    main()
